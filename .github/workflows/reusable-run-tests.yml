name: "Run tests"
on:
  workflow_call:
    inputs:
      php-version:
        type: string
        required: false
        default: "8.2"
      composer-options:
        type: string
        required: false
        default: ""
      database-engine:
        type: string
        required: false
        default: sqlite
      database-version:
        type: string
        required: false
        default: "-"
      phpunit-options:
        type: string
        required: false
        default: ""
      with-coverage:
        type: boolean
        required: false
        default: false
      artifact-name:
        type: string
        required: false
jobs:
  tests:
    name: "Run tests"
    runs-on: ubuntu-latest
    env:
      COMPOSE_FILE: ./docker-compose.yml
      PHP_VERSION: ${{ inputs.php-version }}
      DB_ENGINE: ${{ inputs.database-engine }}
      DB_VERSION: ${{ inputs.database-version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ inputs.php-version }}
          extensions: curl, zip, mbstring, pdo, pdo_mysql, pgsql, pdo_pgsql, sqlsrv, pdo_sqlsrv, pdo_odbc
          coverage: ${{ inputs.with-coverage && 'xdebug' || 'none' }}
      - name: Install ODBC drivers
        if: ${{ inputs.database-engine == 'sqlsrv' }}
        run: |
          curl -sSL -O https://packages.microsoft.com/config/ubuntu/$(grep VERSION_ID /etc/os-release | cut -d '"' -f 2)/packages-microsoft-prod.deb
          sudo dpkg -i packages-microsoft-prod.deb
          rm packages-microsoft-prod.deb
          sudo apt-get update
          sudo ACCEPT_EULA=Y apt-get install -y msodbcsql18
          sudo apt-get install -y unixodbc-dev        
      - name: Setup .env
        run: sed -i -E "s/^DB_HOST=.*$/DB_HOST=127.0.0.1/g" .env.test
      - name: Install dependencies
        run: composer update --no-interaction ${{ inputs.composer-options }}
      - name: Start database container
        run: docker compose up -d --wait database
      - name: Run tests
        run: ./vendor/bin/phpunit ${{ inputs.phpunit-options }} ${{ inputs.with-coverage && '--coverage-html coverage --coverage-php coverage/coverage.php --coverage-clover coverage/clover.xml --coverage-cobertura coverage/cobertura.xml' || '' }}
      - name: Upload artifacts
        if: ${{ inputs.artifact-name }}
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ inputs.artifact-name }}
          path: coverage

