name: "Run tests"
on:
  push:
    branches:
      - master
      - main
      - test
    paths:
      - src/**
      - tests/**
      - phpunit.xml
  pull_request:
    types:
      - opened
      - reopened
      - edited
      - synchronize
    branches:
      - master
      - main
    paths:
      - src/**
      - tests/**
      - phpunit.xml
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
jobs:
  tests:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        php: [8.4, 8.3, 8.2, 8.1, 8.0, 7.4, 7.3]
        laravel: [12.*, 11.*, 10.*, 9.*, 8.*]
        dependency-version: [lowest, stable]
        database-engine: [sqlite, mysql, mariadb, pgsql, sqlsrv]
        exclude:
          - laravel: 12.*
            php: 8.1
          - laravel: 12.*
            php: 8.0
          - laravel: 12.*
            php: 7.4
          - laravel: 12.*
            php: 7.3
          - laravel: 11.*
            php: 8.1
          - laravel: 11.*
            php: 8.0
          - laravel: 11.*
            php: 7.4
          - laravel: 11.*
            php: 7.3
          - laravel: 10.*
            php: 8.0
          - laravel: 10.*
            php: 7.4
          - laravel: 10.*
            php: 7.3
          - laravel: 9.*
            php: 8.4
          - laravel: 9.*
            php: 8.3
          - laravel: 9.*
            php: 8.2
            dependency-version: lowest
          - laravel: 9.*
            php: 7.4
          - laravel: 9.*
            php: 7.3
          - laravel: 8.*
            php: 8.4
          - laravel: 8.*
            php: 8.3
          - laravel: 8.*
            php: 8.2
            dependency-version: lowest
          - database-engine: mysql
          - database-engine: pgsql
          - database-engine: sqlsrv
        include:
          - database-engine: sqlite
            database-version: "-"
          # MySQL / min
          - php: 7.3
            laravel: 8.*
            dependency-version: lowest
            database-engine: mysql
            database-version: 5.7
          # MySQL / max
          - php: 8.4
            laravel: 12.*
            dependency-version: stable
            database-engine: mysql
            database-version: 8.4
          # MariaDB / min
          - php: 7.3
            laravel: 8.*
            dependency-version: lowest
            database-engine: mariadb
            database-version: 10.2
          # MariaDB / max
          - php: 8.4
            laravel: 12.*
            dependency-version: stable
            database-engine: mariadb
            database-version: 11.7
          # PostgreSQL / min
          - php: 7.3
            laravel: 8.*
            dependency-version: lowest
            database-engine: pgsql
            database-version: 9.6
          # PostgreSQL / min
          - php: 8.4
            laravel: 12.*
            dependency-version: stable
            database-engine: pgsql
            database-version: 17.4
          # SQL Server / min
          - php: 8.1
            laravel: 8.*
            dependency-version: lowest
            database-engine: sqlsrv
            database-version: 2019
          # SQL Server / max
          - php: 8.4
            laravel: 12.*
            dependency-version: stable
            database-engine: sqlsrv
            database-version: 2022
    env:
      COMPOSE_FILE: ./docker-compose.yml
      PHP_VERSION: ${{ matrix.php }}
      DB_ENGINE: ${{ matrix.database-engine }}
      DB_VERSION: ${{ matrix.database-version }}
    name: "php:${{ matrix.php }}/lara:${{ matrix.laravel }}/${{ matrix.dependency-version }}/${{ matrix.database-engine }}:${{ matrix.database-version }}"
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
          extensions: curl, zip, mbstring, pdo, pdo_mysql, pgsql, pdo_pgsql, sqlsrv, pdo_sqlsrv, pdo_odbc
          coverage: none
      - name: Install ODBC drivers
        if: ${{ matrix.database-engine == 'sqlsrv' }}
        run: |
          curl -sSL -O https://packages.microsoft.com/config/ubuntu/$(grep VERSION_ID /etc/os-release | cut -d '"' -f 2)/packages-microsoft-prod.deb
          sudo dpkg -i packages-microsoft-prod.deb
          rm packages-microsoft-prod.deb
          sudo apt-get update
          sudo ACCEPT_EULA=Y apt-get install -y msodbcsql18
          sudo apt-get install -y unixodbc-dev        
      - name: Setup .env
        run: sed -i -E "s/^DB_HOST=.*$/DB_HOST=127.0.0.1/g" .env.test
      - name: Install dependencies
        run: composer update --with laravel/framework:${{ matrix.laravel }} --prefer-${{ matrix.dependency-version }} --prefer-dist --no-interaction
      - name: Start database container
        run: docker compose up -d --wait database
      - name: Run tests
        run: ./vendor/bin/phpunit
